name: VHub.Media.Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  MONGODB_VERSION: '7.0'
  BASE_DIR: './VHub.Media/VHub.Media.sln'
  DOCKER_COMPOSE_FILE: './VHub.Media/docker-compose.test.yaml'

jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Start test environment with Docker Compose
        run: |
          echo "üê≥ Starting test environment..."
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} -p vhub-media-tests up -d
          
          echo "‚è≥ Waiting for services to be healthy..."
          timeout 60s bash -c 'until docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps | grep "Up (healthy)"; do sleep 2; done' || true
          
          echo "‚úÖ Test environment started"
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps

      - name: Wait for MongoDB readiness
        run: |
          echo "‚è≥ Waiting for MongoDB to accept connections..."
          for i in {1..30}; do
            if docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} exec -T mongo-tests mongosh --eval "db.adminCommand('ping')" --quiet; then
              echo "‚úÖ MongoDB is ready!"
              break
            fi
            echo "Attempt $i/30..."
            sleep 2
          done

      - name: Restore dependencies
        run: dotnet restore ${{ ENV.BASE_DIR }}

      - name: Build
        run: dotnet build ${{ ENV.BASE_DIR }} --no-restore --configuration Release

      - name: Run tests
        run: |
          dotnet test \
          ${{ ENV.BASE_DIR }} \
          --no-restore \
          --no-build
          --configuration Release
          --verbosity normal
          --logger "trx;LogFileName=test-results.trx" \
          --results-directory TestResults

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/**/*.trx

      - name: Stop test environment
        if: always()
        run: |
          echo "üõë Stopping test environment..."
          docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down -v